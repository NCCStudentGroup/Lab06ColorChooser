/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jcolorchooser;

import java.awt.Color;
import java.util.Vector;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author 00220682
 */
public class ColorChooser extends javax.swing.JPanel implements ChangeListener, ColorListener {
    
    private Vector listeners;

    /**
     * Creates new form ColorChooser
     */
    public ColorChooser() {
        initComponents();
        sldRed.addChangeListener(this);
        sldGreen.addChangeListener(this);
        sldBlue.addChangeListener(this);
        listeners = new Vector();
    }
    
    public void addColorListener(ColorListener colorListener){
        listeners.addElement(colorListener);
    }
    
    public void removeColorListener(ColorListener colorListener){
        listeners.removeElement(colorListener);
    }

/*  // Not used, leftover from the previous implementation ideas   
    public void setRed(int red){
        sldRed.setValue(red);
    }
    public void setGreen(int green){
        sldGreen.setValue(green);
    }
    public void setBlue(int blue){
        sldBlue.setValue(blue);
    }
*/    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sldRed = new javax.swing.JSlider();
        sldGreen = new javax.swing.JSlider();
        sldBlue = new javax.swing.JSlider();

        setLayout(new java.awt.GridLayout(3, 1));

        sldRed.setMajorTickSpacing(50);
        sldRed.setMaximum(255);
        sldRed.setMinorTickSpacing(10);
        sldRed.setPaintLabels(true);
        sldRed.setPaintTicks(true);
        sldRed.setValue(0);
        add(sldRed);

        sldGreen.setMajorTickSpacing(50);
        sldGreen.setMaximum(255);
        sldGreen.setMinorTickSpacing(10);
        sldGreen.setPaintLabels(true);
        sldGreen.setPaintTicks(true);
        sldGreen.setValue(0);
        add(sldGreen);

        sldBlue.setMajorTickSpacing(50);
        sldBlue.setMaximum(255);
        sldBlue.setMinorTickSpacing(10);
        sldBlue.setPaintLabels(true);
        sldBlue.setPaintTicks(true);
        sldBlue.setValue(0);
        add(sldBlue);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider sldBlue;
    private javax.swing.JSlider sldGreen;
    private javax.swing.JSlider sldRed;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent ce) {
         int r = sldRed.getValue();
         int g = sldGreen.getValue();
         int b = sldBlue.getValue();
         Color color = new Color(r,g,b);
         fireColorEvent(new ColorEvent(this,color));
    }
    
    private void fireColorEvent(ColorEvent ce){
        Vector v;
        synchronized(listeners){
            v = (Vector)listeners.clone();
        }
        int size = v.size();
        for(int i=0; i<size; i++){
            ColorListener colorListener = (ColorListener)v.elementAt(i);
            colorListener.changeColor(ce);
        }
    }

    // Listener to color change event - move sliders to reflect RGB values of event
    @Override
    public void changeColor(ColorEvent ce) {
        // Ger RGB values
        int r = ce.getColor().getRed();
        int g = ce.getColor().getGreen();
        int b = ce.getColor().getBlue();
        
        // Move sliders to show RGB values
        //sldRed.setValue(r);
        //sldGreen.setValue(g);
        //sldBlue.setValue(b);
        updateSliders(r, g, b);
         
    }
    
    //private void updateSliders(final int r, final int g, final int b){ // final was in the example, but does not 
    private void updateSliders(int r, int g, int b){
       SwingUtilities.invokeLater(new Runnable () {
            public void run() {
                sldRed.setValue(r);
                sldGreen.setValue(g);
                sldBlue.setValue(b);
            }
        });    
    }
}
